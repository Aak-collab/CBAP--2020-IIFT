# -*- coding: utf-8 -*-
"""Assignment 4_ deepl learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1X2OHyJ-gwP3K1PDrhd9mlOFatJX53cdP
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import tensorflow as tf
from tensorflow.keras.layers import InputLayer, Dense, Conv2DTranspose, Conv2D, Reshape, BatchNormalization, UpSampling2D, LeakyReLU, Dropout,Flatten, Activation
from tensorflow.keras.models import Sequential
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.datasets import fashion_mnist
import matplotlib.pyplot as plt
# %matplotlib inline

df = fashion_mnist
(train_images, train_labels),(test_images, test_labels)= df.load_data()

train_images.shape[1:]

classes = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress',
'Coat', 'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle Boot']

plt.figure(figsize=(10,10))
for i in range(25):
  plt.subplot(5,5,i+1)
  plt.xticks([])
  plt.yticks([])
  plt.grid(False)
  plt.imshow(train_images[i], cmap='gray_r')
  plt.xlabel(classes[train_labels[i]])
plt.show()

"""GENERATOR MODEL """

def generator(latent_dim=100):
  model = Sequential()
  nch=200
  n_nodes = nch*14*14
  #model.add(InputLayer(input_shape=(100)))
  model.add(Dense(units=n_nodes, input_shape=(latent_dim,), kernel_initializer='glorot_normal'))
  model.add(BatchNormalization())
  model.add(Activation('relu'))
  model.add(Reshape([14,14,nch]))
  model.add(UpSampling2D(size=(2,2)))
   #layer 1
  model.add(Conv2D(100,(3,3), padding='same'))
  model.add(BatchNormalization())
  model.add(Activation('relu'))
  #layer 2 
  model.add(Conv2D(nch/4, (3,3),padding='same'))
  model.add(BatchNormalization())
  model.add(Activation('relu'))
  #layer 3
  model.add(Conv2D(1,(1,1), padding='same'))
  model.add(Activation('sigmoid'))
 
  model.compile(loss='categorical_crossentropy', metrics=['accuracy'], optimizer='adam')

  return model

my_gen=generator()
my_gen.summary()

"""DISCRIMINATOR MODEL"""

def discriminiator(input_dim=(28,28,1)):
  shp = train_images.shape[1:]
  #d_input = Input(shape=shp)
  drp=0.4
  #Layer1
  model = Sequential()
  model.add(Conv2D(256, (5,5), strides=(2,2),padding='same', activation='relu', input_shape=input_dim))
  model.add(LeakyReLU(alpha=0.2))
  model.add(Dropout(drp))
  #layer2
  model.add(Conv2D(512, (5,5), strides=(2,2)))
  model.add(LeakyReLU(alpha=0.2))
  model.add(Dropout(drp))
  model.add(Flatten())
  model.add(Dense(256))
  model.add(LeakyReLU(alpha=0.2))
  model.add(Dropout(drp))
  model.add(Dense(2, activation='softmax'))

  model.compile(loss='categorical_crossentropy', metrics=["accuracy"], optimizer='rmsprop')
  return model

my_discr = discriminiator()
my_discr.summary()

"""CREATING GAN """

def gan(discriminiator, generator):
  model = Sequential()
  model.add(generator)
  model.add(discriminiator)
  model.compile(loss='categorical_crossentropy', metrics=['accuracy'])
  return model

gan_model = gan(my_discr, my_gen)
gan_model.summary()

