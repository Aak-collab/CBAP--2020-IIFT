# -*- coding: utf-8 -*-
"""end course test_deep learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12NjtWzrzPQPh-17AkBiS9Bd3YbDD2fmd
"""

import numpy as np
import pandas as pd
import tensorflow
from tensorflow.keras.datasets import fashion_mnist
import matplotlib.pyplot as plt

"""Loading and splitting the fashion_mnist dataset"""

(x_train, y_train),(x_test, y_test)= fashion_mnist.load_data()

x_train.shape

y_train.shape

classes = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat', 'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle Boot']

"""Scaling the data"""

x_train = x_train/255.0
x_test = x_test/255.0

"""Displaying first 25 images along with labels:"""

plt.figure(figsize=(10,10))
for i in range(25):
  plt.subplot(5,5,i+1)
  plt.xticks([])
  plt.yticks([])
  plt.grid(False)
  plt.imshow(x_train[i], cmap='gray_r')
  plt.xlabel(classes[y_train[i]])
plt.show()

"""Reshaping the data"""

x_train = x_train.reshape(-1,28,28,1)
print("x_train shape:",x_train.shape)
x_test = x_test.reshape(-1,28,28,1)
print("x_test shape:",x_test.shape)
input_shape = x_train.shape[1:]
print("input shape is:", input_shape)

from tensorflow.keras.layers import Input,Dense,Conv2D,  BatchNormalization, UpSampling2D,  Activation, MaxPooling2D, MaxPool2D, Flatten
from tensorflow.keras.models import Sequential
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.models import Model
from tensorflow.keras.utils import to_categorical

"""Converting labels to dummy encoding"""

y_train_case2 = to_categorical(y_train)
y_test_case2 = to_categorical(y_test)
print(y_train)
print(y_train_case2)

batch_size= 1000
epochs = 30

"""CNN model with loss as sparse categorical cross entropy"""

model = Sequential()

model.add(Conv2D(32, (3,3), activation='relu', strides=(1,1), padding='same', input_shape=input_shape))
model.add(MaxPool2D((2,2)))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dense(10, activation='softmax'))
model.compile(loss='sparse_categorical_crossentropy', metrics=['accuracy'], optimizer='adam')
model.summary()

model.fit(x_train, y_train, batch_size=batch_size, epochs=epochs, validation_data=(x_test, y_test))

"""CNN model with loss as categorical crossentropy"""

model2 = Sequential()
model2.add(Conv2D(32, (3,3), activation='relu', strides=(1,1), padding='same', input_shape=input_shape))
model2.add(MaxPool2D((2,2)))
model2.add(Flatten())
model2.add(Dense(128, activation='relu'))
model2.add(Dense(10, activation='softmax'))
model2.compile(loss='categorical_crossentropy', metrics=['accuracy'], optimizer='adam')
model2.summary()

model2.fit(x_train, y_train_case2, batch_size=batch_size, epochs=epochs, validation_data=(x_test, y_test_case2))

test_loss, test_acc = model2.evaluate(x_test, y_test_case2)
print("test loss for model is",test_loss)
print("test accuracy for model is", test_acc)

"""Saving model2 in h5. format"""

model2.save("my_model.h5")

"""LOading saved model"""

new_model = tensorflow.keras.models.load_model("my_model.h5")
new_model.summary()

"""Printing the accuracy of loaded model"""

test_loss_new_model, test_acc_new_model = new_model.evaluate(x_test, y_test_case2)
print( "Test accuracy for loaded model is", round(test_acc_new_model*100,2),"%")

from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report

y_pred = new_model.predict(x_test)
y_pred = np.argmax(y_pred, axis=1)
print(y_pred)

"""Confusion Matrix"""

conf_matr = confusion_matrix(y_test, y_pred)
conf_matr

confusion_matrix_df = pd.DataFrame(conf_matr, columns=classes, index=classes)
confusion_matrix_df

"""Printing classification report"""

classi_rep = classification_report(y_test, y_pred , target_names=classes)
print(classi_rep)

right_classfication_num = []
for i in range(y_pred.shape[0]):
  if y_pred[i] == y_test[i]:
    right_classfication_num.append(1)
print(right_classfication_num)

"""Printing number of misclassfications"""

#right_classfication_num = right_classfication_num.count(1)
misclassifications = y_pred.shape[0] - right_classfication_num
print("Number of missclassifications is", misclassifications)

"""Experiment that can perform multiple parameters training"""

from tensorflow.keras.optimizers import RMSprop,SGD

Epoch = [10,30,50]
Batch_size = [500,1000, 5000] 
Optimizer = ["Adam", "RMSprop", "SGD"]

print(Optimizer[0]+str(Epoch[0])+str(Batch_size[0]),":")

def multiple_parameter_cnn(Xtrain,Ytrain,Xtest,Ytest):
  for i in range(3):
    for j in range(3):
      for k in range(3):
        epochs = Epoch[i]
        batch_size= Batch_size[j]
        optimizer = Optimizer[k]
        #print(epochs)
        #print(batch_size)
        #print(optimizer)
        model_exp = Sequential()
        model_exp.add(Conv2D(32, (3,3), activation='relu', strides=(1,1), padding='same', input_shape=input_shape))
        model_exp.add(MaxPool2D((2,2)))
        model_exp.add(Flatten())
        model_exp.add(Dense(128, activation='relu'))
        model_exp.add(Dense(10, activation='softmax'))
        model_exp.compile(loss='categorical_crossentropy', metrics=['accuracy'], optimizer=optimizer)
        model_exp.fit(Xtrain, Ytrain, batch_size=batch_size, epochs=epochs, validation_data=(Xtest, Ytest), verbose=0)
        test_loss, test_acc = model_exp.evaluate(Xtest, Ytest)
        model_name = optimizer+str(epochs)+str(batch_size)
        
        stored_values={model_name:test_acc}
        stored_values.update({model_name:test_acc})
        print(stored_values)
  return stored_values

multiple_parameter_cnn(x_train, y_train_case2, x_test, y_test_case2)

